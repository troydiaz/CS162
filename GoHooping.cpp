/*********************************************************************** 
** Program Filename: GoHooping.cpp
** Author: Troy Diaz
** Date: 01/28/2024
** Description: 
A basketball shooting contest that supports two players.
The game is simple: five racks and five shots per rack.
'X' - 1pt made, 'O' - 0pt made, and 'M' - 2pts made. Each player can choose
their shooting ability and money ball rack. The game decisions are made after
all players have gone, and compares both scores in the end. 
** Input: 
    "ShootingPower" - values between 1 -- 99
    "MoreMoneyRack" - values between 1 -- 5 
    "PlayAgain" -- 'y' to continue or 'n' to stop.
** Output: 
    "DisplayGameInstruction" - meaning of XOM and rules of play
    "DisplayResults" - prints out the results of each rack with rack #, XOM,
    and score 
    "CompareResults" - prints out the winner or tie of the game.
*********************************************************************/

#include <iostream>
#include <string>
#include <ctime>
#include <cmath>
#include <cstdlib>

using namespace std;

void DisplayGameInstruction();
void PlayAgain(int &playersturn, int &player1_score, int &player2_score);
void ShootingPower(int &shootingability);
void MoreMoneyRack(int &moneyballrack);
void RegPoint(int shootingability, int player_score[], char DisplayScores[], int &RackResults);
void SpecialRack(int shootingability, int player_score[], char DisplayScores[], int &moneyBallTotal);
void DisplayResults(int a, int moneyballrack, char DisplayScores[], int &RackResults, int &FinalResults, int &moneyBallTotal);
void CompareResults(int &playersturn, int &player1_score, int &player2_score, int TotalResult, int moneyBallTotal);

/********************************************************************* 
** Function: DisplayGameInstruction
** Description: Prints out user instruction and rules of the game.
** Parameters: None
** Pre-Conditions: None
** Post-Conditions: None
*********************************************************************/

void DisplayGameInstruction()
{
    // Printing out rules of the shooting contest game
    cout << "Welcome to the basketball shooting contest!" << endl;
    cout << "X means Made (1pt)" << endl;
    cout << "O means Missed (0pt)" << endl;
    cout << "M means Money Ball Made (2pt)" << endl;
    cout << "Player 1 will go first, then Player 2 goes after." << endl;
    cout << "The winner will be announced at the end!" << endl;
}

/********************************************************************* 
** Function: ShootingPower
** Description: Asks the player for their shooting ability between 1-99
** Parameters: 
    int &shootingability - stores the player's shooting ability
    and compares it to number generated by rand() to calculate made or missed 
    shots.
** Pre-Conditions: Set to 0. 
** Post-Conditions: Will first be used for Player 1, resets and is used for
Player 2. Repeats if game is restarted by user.
*********************************************************************/

void ShootingPower(int &shootingability)
{
    // Asking for shooting ability
    while (shootingability < 1 || shootingability > 99)
    {
        cout << "Enter your shooting ability, from 1 to 99: ";
        cin >> shootingability;

        // Values accepted only within [1-99]
        if (shootingability < 1 || shootingability > 99)
            cout << "Invalid Input, try again. " << endl;
    }
}

/********************************************************************* 
** Function: MoreMoneyRack
** Description: Asks the user to pick a number between 1-5 indicating their
"money ball rack" where possible points on this rack are 2 or 0. 
** Parameters: 
    int &moneyballrack - stores this integer and compares it to a 
    for loop in SpecialRack func. that calculates scores in this rack.
** Pre-Conditions: Set to 0.
** Post-Conditions: After Player 1 has finished their turn, moneyballrack
is set to 0, and repeats after Player 2 or if game resets.
*********************************************************************/

void MoreMoneyRack(int &moneyballrack)
{
    // Asks for user to pick between 1-5
    while (moneyballrack < 1 || moneyballrack > 5)
    {
        cout << "What's your moneyballrack? (1-5): ";
        cin >> moneyballrack;

        // Values accepted only within [1,5]
        if (moneyballrack < 1 || moneyballrack > 5)
            cout << "Invalid input, try again. " << endl;
    }

    // bc index pushes it forward 1
    moneyballrack = moneyballrack - 1; 
}

/********************************************************************* 
** Function: SpecialRack
** Description: Runs when Player chooses their money ball rack, each point
made can only be 2pts or 0pt. Adds and updates Player's score after 5 shots.
** Parameters:
    int shootingability - Needs value from shootingability (1-99)
    int player_score[] - Updates score after each shot and stores it in this array
    char DisplayScores[] - Updates symbol after each shot and stores it in this array
    int &moneyBallTotal - Stores value of moneyBallTotal and is passed onto
    DisplayResults for total of that rack, and CompareResults to be added
    to the TotalResult for the current Player. 
** Pre-Conditions: The arrays player_score and DisplayScores are set to have
a size of 5 empty values. 
** Post-Conditions: After every loop, stopping at 5 loops, player_score 
and DisplayScore values are updated.
*********************************************************************/

void SpecialRack(int shootingability, int player_score[], char DisplayScores[], int &moneyBallTotal)
{
    // Loops 5 times for 5 shots in the money ball rack
    for (int d = 0; d < 5; ++d)
    {
        int RandomNumber = rand() % 99;

        /*
        Comparing the shootingability to RandomNumber generated by rand(). 
        rand() is set to be a value between 0-100
        Shot and points is made if RandomNumber is less than shootingability.
        Random number is generated 5 times so every shot made is random.
        */

        if (RandomNumber < shootingability)
        {
            player_score[d] = 2;
            DisplayScores[d] = 'M';

            // Updates points in moneyBallTotal that is used in TotalResult in end.
            moneyBallTotal += player_score[d];
        }
        else
        {
            player_score[d] = 0;
            DisplayScores[d] = 'O';
        }
    }
}

/********************************************************************* 
** Function: RegPoint
** Description: Runs if a rack number is not a Player's moneyballrack.
Each point made during a regular rack is either 1, 0, and 2pt (for the last
shot). 
** Parameters:
    int shootingability - Needs value from shootingability to compare to RandomNumber
    int player_score[] - Stores integer values into this array
    char DisplayScores[] - Stores character or symbol values into this array
    int &RackResults - Stores all integer values made in for loop and is the sum
    of all shots within the rack.  
** Pre-Conditions: The arrays player_score and DisplayScores are set to have
a size of 5 empty values.
** Post-Conditions: After every loop, stopping at 5 loops, player_score 
and DisplayScore values are updated.
*********************************************************************/

void RegPoint(int shootingability, int player_score[], char DisplayScores[], int &RackResults)
{
    // Loops 5 times for each shot
    for (int b = 0; b < 5; ++b)
    {
        int RandomNumber = rand() % 99;

        // compares rand number generated to shootingability

        if (RandomNumber < shootingability)
        {
            // for first four shots, either can only be X or O
            // regular shot

            if (b < 4)
            {
                player_score[b] = 1;
                DisplayScores[b] = 'X';
                RackResults += player_score[b];
            }

            // for last shot, either can be M or O
            // money ball shot

            else if (b == 4)
            {
                DisplayScores[b] = 'M';
                RackResults += 2;
            }
        }
        else
        {
            player_score[b] = 0;
            DisplayScores[b] = 'O';
            RackResults += player_score[b];
        }
    }
}

/********************************************************************* 
** Function: DisplayResults
** Description: Displays the number results of each rack
** Parameters:
    int a - The current rack number inside for loop
    int moneyballrack - The number position of the money ball rack 
    char DisplayScores[] - Symbols from made, missed, and money ball made shots
    int &RackResults - Needs value from calculated points in SpecialRack and RegPoint
    and adds it to FinalResults. 
    int &FinalResults - Points from all racks are added in this variable
    int &moneyBallTotal - Points from money ball rack are added in this variable
** Pre-Conditions: RackResults, FinalResults, moneyBallTotal are set to 0. 
** Post-Conditions: XOM are displayed for scores, scores for each rack are displayed.
RackResults is set to 0 for next player and FinalResults is updated for final score.
*********************************************************************/

void DisplayResults(int a, int moneyballrack, char DisplayScores[], int &RackResults, int &FinalResults, int &moneyBallTotal)
{
    // Displays the result of each shot
    for (int c = 0; c < 5; ++c)
    {
        // symbols XOM are displayed
        cout << DisplayScores[c] << " ";

        // displays scores for regular rack
        if (c == 4 && moneyballrack != a)
        {
            cout << "Score: " << RackResults << endl;
            FinalResults += RackResults;
            RackResults = 0;
        }

        // displays scores for moneyball rack
        else if (c == 4 && moneyballrack == a)
        {
            cout << "Score: " << moneyBallTotal << endl;
        }
    }
}

/********************************************************************* 
** Function: CompareResults
** Description: Compares the results of Player 1 and Player 2 and decides
winner or tie of the game.
** Parameters:
    int &playersturn - First iteration of game is set to 0. Variable is updated
    to refer to who's playing (Player 1 or Player 2). 
    int &player1_score - Updated for final score of Player 1. 
    int &player2_score - Updated for final score of Player 2
    int TotalResult - Value of total score of the four regular racks
    int moneyBallTotal - Value of total score of the money ball rack
** Pre-Conditions: playersturn, player1_score, player2_score are set to 0.
** Post-Conditions: playersturn is updated after first turn. Winner or tie is determined. 
*********************************************************************/

void CompareResults(int &playersturn, int &player1_score, int &player2_score, int TotalResult, int moneyBallTotal)
{
    // playersturn == 0 means Player 1
    if (playersturn == 0)
    {
        // player1_score is updated after the sum of TotalResult and moneyBallTotal
        player1_score = TotalResult + moneyBallTotal;
        cout << "Player 1's Total Result: " << player1_score << endl;

        // Changing the value of playersturn to be 1 for Player 2
        playersturn += 1;

        // loops through entire PlayAgain function for Player 2
        PlayAgain(playersturn, player1_score, player2_score);
    }

    // playersturn == 1 means Player 2
    else if (playersturn == 1)
    {
        player2_score = TotalResult + moneyBallTotal;
        cout << "Player 2's Total Result: " << player2_score << endl;

        // compares both scores in player1_score and player2_score
        if (player1_score > player2_score)
        {
            cout << "Player 1 Won!" << endl;
        }
        else if (player1_score == player2_score)
        {
            cout << "It's a tie!" << endl;
        }
        else
        {
            cout << "Player 2 Won!" << endl;
        }
    }
}

/********************************************************************* 
** Function: PlayAgain
** Description: Asks for shooting ability, money ball rack, determines 
shot made in regular racks and money ball rack, loops through 5 times 
for each rack.
** Parameters:
    int &playersturn - Set to 0, is updated after CompareResults is called
    int &player1_score - Updated after CompareResults is called and stores
    Player 1's total score 
    int &player2_score - Updated after CompareResults is called and stores
    Player 2's total score
** Pre-Conditions: sets playersturn, player1_score, and player 2_score to 0
** Post-Conditions: playersturn, player1_score, and player2_score are updated
after CompareResults is called.
*********************************************************************/

void PlayAgain(int &playersturn, int &player1_score, int &player2_score)
{
    int shootingability = 0;
    int moneyballrack = 0;
    int TotalResult = 0;
    int moneyBallTotal = 0;
    int player_score[5] = {0};
    char DisplayScores[5] = {};
    int FinalResults = 0;
    int RackResults = 0;
    int a;

    ShootingPower(shootingability);
    MoreMoneyRack(moneyballrack);

    // loops 5 times for 5 racks
    for (int a = 0; a < 5; ++a)
    {
        // Displaying rack number, adding 1 because it starts at 0
        cout << "Rack " << a + 1 << ": ";

        // If rack is money ball rack, then call SpecialRack
        if (moneyballrack == a)
        {
            SpecialRack(shootingability, player_score, DisplayScores, moneyBallTotal);
        }

        // if rack is regular, then call RegPoint
        else if (moneyballrack != a)
        {
            RegPoint(shootingability, player_score, DisplayScores, RackResults);
        }

        // The results of each rack are displayed
        DisplayResults(a, moneyballrack, DisplayScores, RackResults, FinalResults, moneyBallTotal);
    }

    // The results of who's turn it is are added up
    TotalResult += FinalResults;

    // TotalResult is used in CompareResults for who's turn it is
    CompareResults(playersturn, player1_score, player2_score, TotalResult, moneyBallTotal);
}

/********************************************************************* 
** Function: main
** Description: Displays instructions and asks if user wants to play again.
Keeps track of who is playing and sets both player scores to be 0.
** Parameters: None
** Pre-Conditions: None
** Post-Conditions: After a game is played, user has a choice to play again.
If 'y' then function PlayAgain is called and process starts over. If 'n', then
program ends.
*********************************************************************/

int main()
{
    // Makes rand() random when program is compiled
    srand(static_cast<unsigned int>(time(nullptr)));

    DisplayGameInstruction();

    int playersturn = 0;
    int player1_score = 0;
    int player2_score = 0;
    char playGame;

    PlayAgain(playersturn, player1_score, player2_score);

    /*
    Asks user if they want to play again and only accepts 'y' or 
    'n' for an answer
    */
    
    do
    {
        cout << "Do you want to play again? (y,n): ";
        cin >> playGame;
        if (playGame == 'y')
        {
            // needs to be updated because it will only repeat Player 2's turn
            playersturn = 0;
            PlayAgain(playersturn, player1_score, player2_score);
        }
    } 
    while (playGame == 'y');

    return 0;
}
